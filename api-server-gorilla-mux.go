package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
)

type Article struct {
	Id      string `json:"Id"`
	Title   string `json:"Title"`
	Desc    string `json:"desc"`
	Content string `json:"content"`
}

// let's declare a global Articles array
// that we can then populate in our main function
// to simulate a database
var Articles []Article

func homePage(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Welcome to the HomePage!")
	fmt.Println("Endpoint Hit: homePage")
}

func returnAllArticles(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint Hit: returnAllArticles")
	json.NewEncoder(w).Encode(Articles)
}

func returnSingleArticle(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	key := vars["id"]

	// Loop over all of our Articles
	// if the article.Id equals the key we pass in
	// return the article encoded as JSON
	for _, article := range Articles {
		if article.Id == key {
			json.NewEncoder(w).Encode(article)
		}
	}
}

func createNewArticle(w http.ResponseWriter, r *http.Request) {
	// get the body of our POST request
	// unmarshal this into a new Article struct
	// append this to our Articles array.
	reqBody, _ := ioutil.ReadAll(r.Body)
	var article Article
	json.Unmarshal(reqBody, &article)
	// update our global Articles array to include
	// our new Article
	Articles = append(Articles, article)

	json.NewEncoder(w).Encode(article)
}

func deleteArticle(w http.ResponseWriter, r *http.Request) {
	// once again, we will need to parse the path parameters
	vars := mux.Vars(r)
	// we will need to extract the `id` of the article we
	// wish to delete
	id := vars["id"]

	// we then need to loop through all our articles
	for index, article := range Articles {
		// if our id path parameter matches one of our
		// articles
		if article.Id == id {
			// updates our Articles array to remove the
			// article
			Articles = append(Articles[:index], Articles[index+1:]...)
		}
	}
}

type AutoGenerated struct {
	Status string `json:"status"`
	Data   []struct {
		Job       string `json:"job"`
		NodeName  string `json:"node_name"`
		Pod       string `json:"pod"`
		Container string `json:"container"`
		Filename  string `json:"filename"`
		Namespace string `json:"namespace"`
		Stream    string `json:"stream"`
		App       string `json:"app"`
	} `json:"data"`
}

func getLokiLabels(w http.ResponseWriter, r *http.Request) {

	// iz query params u env var
	vars := mux.Vars(r)
	selectedNamespace := vars["namespace"]

	resp, err := http.Get("http://loki.loki:3100/loki/api/v1/series?match[]={namespace=\"" + selectedNamespace + "\"}")
	if err != nil {
		log.Fatal(err)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	var summary = new(AutoGenerated)
	err3 := json.Unmarshal(body, &summary)
	if err3 != nil {
		fmt.Println("whoops:", err3)
		//outputs: whoops: <nil>
	}
	// fmt.Println(summary.Data[0])
	var ls []string
	// ls = append(ls, "4")
	fmt.Println("Available selectors in the \"" + selectedNamespace + "\" are:")
	for _, i := range summary.Data {
		ls = append(ls, i.App)
		fmt.Println(i.App)
	}

	processed := map[string]struct{}{}
	runner := 0
	for _, s := range ls {
		if _, exists := processed[s]; !exists {
			// If this value has not been seen yet, add it to the list
			processed[s] = struct{}{}
			ls[runner] = s
			runner++
		}
	}
	ls = ls[:runner]

	json.NewEncoder(w).Encode(ls)
}

type AutoGenerated2 struct {
	Status string `json:"status"`
	Data   struct {
		ResultType string `json:"resultType"`
		Result     []struct {
			Stream struct {
				Container string `json:"container"`
				Filename  string `json:"filename"`
				Job       string `json:"job"`
				Namespace string `json:"namespace"`
				NodeName  string `json:"node_name"`
				Pod       string `json:"pod"`
				Stream    string `json:"stream"`
				App       string `json:"app"`
			} `json:"stream"`
			Values [][]interface{} `json:"values"`
		} `json:"result"`
		Stats struct {
			Summary struct {
				BytesProcessedPerSecond int     `json:"bytesProcessedPerSecond"`
				LinesProcessedPerSecond int     `json:"linesProcessedPerSecond"`
				TotalBytesProcessed     int     `json:"totalBytesProcessed"`
				TotalLinesProcessed     int     `json:"totalLinesProcessed"`
				ExecTime                float64 `json:"execTime"`
				QueueTime               float64 `json:"queueTime"`
				Subqueries              int     `json:"subqueries"`
			} `json:"summary"`
			Querier struct {
				Store struct {
					TotalChunksRef        int `json:"totalChunksRef"`
					TotalChunksDownloaded int `json:"totalChunksDownloaded"`
					ChunksDownloadTime    int `json:"chunksDownloadTime"`
					Chunk                 struct {
						HeadChunkBytes    int `json:"headChunkBytes"`
						HeadChunkLines    int `json:"headChunkLines"`
						DecompressedBytes int `json:"decompressedBytes"`
						DecompressedLines int `json:"decompressedLines"`
						CompressedBytes   int `json:"compressedBytes"`
						TotalDuplicates   int `json:"totalDuplicates"`
					} `json:"chunk"`
				} `json:"store"`
			} `json:"querier"`
			Ingester struct {
				TotalReached       int `json:"totalReached"`
				TotalChunksMatched int `json:"totalChunksMatched"`
				TotalBatches       int `json:"totalBatches"`
				TotalLinesSent     int `json:"totalLinesSent"`
				Store              struct {
					TotalChunksRef        int `json:"totalChunksRef"`
					TotalChunksDownloaded int `json:"totalChunksDownloaded"`
					ChunksDownloadTime    int `json:"chunksDownloadTime"`
					Chunk                 struct {
						HeadChunkBytes    int `json:"headChunkBytes"`
						HeadChunkLines    int `json:"headChunkLines"`
						DecompressedBytes int `json:"decompressedBytes"`
						DecompressedLines int `json:"decompressedLines"`
						CompressedBytes   int `json:"compressedBytes"`
						TotalDuplicates   int `json:"totalDuplicates"`
					} `json:"chunk"`
				} `json:"store"`
			} `json:"ingester"`
		} `json:"stats"`
	} `json:"data"`
}

type AutoGenerated3 struct {
	AppName string          `json:"app_name"`
	Logs    [][]interface{} `json:"logs"`
}

func getLokiLogs(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	// selectedNamespace := vars["namespace"]
	selectedAppLabel := vars["app"]
	// selectedStartTime := vars["start"]
	// selectedEndTime := vars["end"] */

	//   http://localhost:8081/loki/api/v1/query_range?query={namespace="solver-datalake-apis",app="solver-foundation-prediction-api"}
	selectedNamespace := "solver-datalake-apis"
	// selectedNamespace := r.URL.Query().Get("namespace")
	// selectedAppLabel := r.URL.Query().Get("app")
	selectedStartTime := r.URL.Query().Get("start")
	selectedEndTime := r.URL.Query().Get("end")
	if selectedNamespace == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Header().Set("Content-Type", "application/json")
		resp := make(map[string]string)
		resp["message"] = "A namespace must be specified"
		jsonResp, err := json.Marshal(resp)
		if err != nil {
			log.Fatalf("Error happened in JSON marshal. Err: %s", err)
		}
		w.Write(jsonResp)
		fmt.Println(jsonResp)
		return
	}
	if selectedAppLabel == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Header().Set("Content-Type", "application/json")
		resp := make(map[string]string)
		resp["message"] = "An app selector must be specified"
		jsonResp, err := json.Marshal(resp)
		if err != nil {
			log.Fatalf("Error happened in JSON marshal. Err: %s", err)
		}
		w.Write(jsonResp)
		return
	}

	fmt.Println(selectedAppLabel, selectedNamespace, selectedStartTime, selectedEndTime)

	resp, err := http.Get("http://loki.loki:3100/loki/api/v1/query_range?query={namespace=\"" + selectedNamespace + "\",app=\"" + selectedAppLabel + "\"}&start=" + selectedStartTime + "&end=" + selectedEndTime)
	if err != nil {
		log.Fatal(err)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	var summary2 = new(AutoGenerated2)
	err3 := json.Unmarshal(body, &summary2)
	if err3 != nil {
		fmt.Println("whoops:", err3)
	}

	var ls []AutoGenerated3
	var result AutoGenerated3

	fmt.Println("The following logs are found:")
	for i := range summary2.Data.Result {
		result.AppName = summary2.Data.Result[i].Stream.App
		result.Logs = summary2.Data.Result[i].Values
		ls = append(ls, result)
		fmt.Println(i)
		i++
		fmt.Println(i)
		fmt.Println(result)
	}

	fmt.Println(ls)
	json.NewEncoder(w).Encode(ls)
}

func getCurrentTimestamp() int64 {
	return time.Now().UnixNano()
}

func handleRequests() {
	// creates a new instance of a mux router
	//myRouter := mux.NewRouter().StrictSlash(true)
	// replace http.HandleFunc with myRouter.HandleFunc
	//myRouter.HandleFunc("/", homePage)
	//myRouter.HandleFunc("/articles", returnAllArticles)
	//myRouter.HandleFunc("/article", createNewArticle).Methods("POST")
	//myRouter.HandleFunc("/article/{id}", deleteArticle).Methods("DELETE")
	//myRouter.HandleFunc("/article/{id}", returnSingleArticle)
	//myRouter.HandleFunc("/getLokiLabels/{namespace}", getLokiLabels)
	//myRouter.HandleFunc("/getLokiLogs/{app}", getLokiLogs)
	//log.Fatal(http.ListenAndServe(":9003", myRouter))

	myRouter := mux.NewRouter().StrictSlash(true)
	// replace http.HandleFunc with myRouter.HandleFunc
	myRouter.HandleFunc("/", homePage)
	mySubRouter := myRouter.PathPrefix("/logs/").Subrouter()
	myRouter.HandleFunc("/articles", returnAllArticles)
	myRouter.HandleFunc("/article", createNewArticle).Methods("POST")
	myRouter.HandleFunc("/article/{id}", deleteArticle).Methods("DELETE")
	myRouter.HandleFunc("/article/{id}", returnSingleArticle)
	mySubRouter.HandleFunc("/get-loki-labels/{namespace}", getLokiLabels)
	mySubRouter.HandleFunc("/get-loki-logs/{app}", getLokiLogs)
	//http.Handle("/", myRouter)
	log.Fatal(http.ListenAndServe(":8080", myRouter))
}

func main() {
	fmt.Println("Rest API v2.0 - Mux Routers" + "\n")
	Articles = []Article{
		Article{Id: "1", Title: "Hello", Desc: "Article Description", Content: "Article Content"},
		Article{Id: "2", Title: "Hello 2", Desc: "Article Description", Content: "Article Content"},
	}
	handleRequests()
}
